
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> retv;
        if (!root) return retv;
        std::queue<TreeNode*> q;//队列来存储暂时数据
        q.push(root);
        bool reverse = false;
        vector<int> v;
        for (int cur_level_sz = 1, nx_level_sz = 0; !q.empty();){
            TreeNode* node = q.front(); q.pop();
            v.push_back(node->val); --cur_level_sz;
            if (node->left) {q.push(node->left); ++nx_level_sz;}
            if (node->right) {q.push(node->right); ++nx_level_sz;}
            if (!cur_level_sz) //用来确定是否换行
            {
                retv.push_back(reverse? vector<int>(v.crbegin(), v.crend()) : v); v.clear();
                cur_level_sz = nx_level_sz; nx_level_sz = 0;
                reverse = !reverse;
            }
        }
        return retv;
    }
};