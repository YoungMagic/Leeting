Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> retVal;
        helper(root, retVal, 0);
        reverse(retVal.begin(), retVal.end());
        return retVal;
    }
private:    
    void helper(TreeNode* root, vector<vector<int>>& v, int curLevel)
    {
        if (root == NULL)
            return ;
        if (v.empty() || curLevel > v.size() - 1)//这一步不是很明白。
            v.push_back(vector<int>());
        v[curLevel].push_back(root->val);
        helper(root->left, v, curLevel + 1);
        helper(root->right, v , curLevel + 1);
    }
};