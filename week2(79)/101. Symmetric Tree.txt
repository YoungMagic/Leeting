Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following [1,2,2,null,3,null,3] is not:
    1
   / \
  2   2
   \   \
   3    3


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if (root == NULL) return true;
        return check(root->left, root->right);
    }
private:
    bool check(TreeNode* lNode, TreeNode* rNode)
    {
        if (lNode && rNode){
            if (lNode->val != rNode->val) return false;
            else return check(lNode->left, rNode->right) && check(lNode->right, rNode->left);
            
        }
        else if (lNode || rNode) return false;
        else return true;
    }

};