Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        return helper(inorder, 0, inorder.size(), postorder, 0, postorder.size());
    }
    
    TreeNode* helper(vector<int> &inorder, int i, int j, vector<int>& postorder, int ii, int jj)
    {
        if (i >= j)
            return nullptr;
    
    TreeNode* root = new TreeNode(postorder[jj - 1]);
    auto f = find(inorder.begin() + i, inorder.begin() + j, root->val);
    int dis = f - (inorder.begin() + i);
    root->left = helper(inorder, i, i + dis, postorder, ii, ii + dis);
    root->right = helper(inorder, i + dis + 1, j, postorder, ii + dis, jj - 1);
    return root;
    }
    
};