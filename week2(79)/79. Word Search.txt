Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.
//dfs + backtrace


class Solution {
public:
    bool dfs(vector<vector<char>>& board, string& word, int row, int col, int beg)
    {
        bool res = false;
        if (board[row][col] == word[beg])
        {
            if (beg >= word.size() - 1)
                return true;
            char temp = board[row][col];
            board[row][col] = '*';
            if (row + 1 < board.size() && dfs(board, word, row + 1, col, beg + 1))
                res = true;
            else if(row > 0 && dfs(board, word, row - 1, col, beg + 1))
                res = true;
            else if(col + 1 < board[0].size() && dfs(board, word, row, col + 1, beg + 1))
                res = true;
            else if(col > 0 && dfs(board, word, row, col - 1, beg + 1))
                res = true;
            board[row][col] = temp;
        }
        return res;
    }
    bool exist(vector<vector<char>>& board, string word) {
        for (int i = 0; i < board.size(); i++)
            for (int j = 0; j < board[0].size(); j++)
                if (dfs(board, word, i, j, 0))
                    return true;
        return false;
    }
};