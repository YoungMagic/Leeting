Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].


class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        if (!n) return {-1, -1};
        return search(nums, 0, n - 1, target);
    }
private:
    vector<int> search(vector<int>& nums, int l, int r, int target)
    {
      if (nums[l] == target && nums[r] == target) return {l, r};
      if (nums[l] <= target && target <= nums[r]){
          int mid = (l + r) / 2;
          vector<int> left = search(nums, l, mid, target);
          vector<int> right = search(nums, mid + 1, r, target);
          if (left[0] == -1) return right;
          if (right[0] == -1) return left;
          return {left[0], right[1]};
      }
      return {-1, -1};
    }
    
};