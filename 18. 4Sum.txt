Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note: The solution set must not contain duplicate quadruplets.


class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> total;
        if (nums.size() < 4) return total;
        sort(nums.begin(),nums.end());
       /* if (nums[0] == nums[nums.size() - 1] && (nums[0] * 4 == target)) 
        {total.push_back(vector<int>{nums[0],nums[0],nums[0],nums[0]});
            return total;
        }*/
        for (int i = 0; i < nums.size() - 3; i++)
        {
            if(nums[i] == nums[i - 1] && i > 0) continue;
            int n = nums.size() - 1;
            if(nums[i] + nums[i+1] + nums[i+2] + nums[i+3] > target) break;
            if((nums[i] + nums[n] + nums[n-1] +nums[n-2]) < target) continue;
            for (int j = i + 1; j < nums.size() - 2; j++)
            {
                if(nums[j] == nums[j - 1] && j > i + 1) continue;
                if(nums[i] + nums[j+1] + nums[j+2] + nums[j] > target) break;
                if((nums[i] + nums[j] + nums[n] +nums[n-1]) < target) continue;
                int k = j+1, z = nums.size() - 1;
                
                while(k < z)//change it into 3 sum;
                {
                    int CurS = nums[i] + nums[j] + nums[z] + nums[k];
                    if (CurS < target) k++;
                    else if (CurS > target) z--;
                    else{
                        total.push_back(vector<int>{nums[i], nums[j], nums[k], nums[z]});
                        do{k++;} while(nums[k] == nums[k-1] && k < z);
                        do{z--;} while(nums[z] == nums[z+1] && k < z);
                    }
                }
            }
            
            //tiil the end of time
            
            
        }
        return total;
        
    }
};
