Given a binary tree, flatten it to a linked list in-place.

For example,
Given

         1
        / \
       2   5
      / \   \
     3   4   6
The flattened tree should look like:
   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6



      1             1          1            1          1
     / \           /            \            \          \
    2   5   ===>  2--->  ===>    2   ===>     2  ===>    2
   / \  |\       / \            / \          /            \
  3   4 | 6     3   4          3   4        3--->          3
      ^ |            \           <_|\        \              \
      |_|             5              5        4              4
                       \              \        \              \
                        6              6        5              5
                                                 \              \
                                                  6              6
     (1)           (2)           (3)         (4)           (5)



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void flatten(TreeNode* root) {
        TreeNode* now = root;
        while (now){
            if (now->left)
            {
                TreeNode* pre = now->left;
                while (pre->right)
                    pre = pre->right;
                pre->right = now->right;
                now->right = now->left;
                now->left = NULL;
            }
            now = now->right;
        }
        
    }
};