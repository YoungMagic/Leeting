Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]


class Solution {
public:
    void rec(vector<int> num, int i, vector<vector<int>>& res )
        {
            if (i == num.size() - 1)
            { res.push_back(num);
                return;
            }
            for (int k = i; k < num.size(); k++)
            {
                if (i != k && num[i] == num[k]) continue;
                swap(num[i], num[k]);
                rec(num, i + 1, res);
            }
        }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> res;
        rec(nums, 0, res);
        return res;
        
    }
};