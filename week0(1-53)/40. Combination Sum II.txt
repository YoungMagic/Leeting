Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, 
A solution set is: 
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]



/*class Solution {
public:
    
        void comS(vector<int>& cand, int target, vector<int> com, vector<vector<int>>& res, int begin)
    {  
      if (!target)
          res.push_back(com);
        return;
    
    for (int i = begin; i < cand.size(); i++)
        if(i > begin && cand[i] == cand[i - 1]) continue;
        else if (cand[i] <= target){
           com.push_back(cand[i]);
           comS(cand, target - cand[i], com, res, i + 1);
           com.pop_back();
        }else break;
    
    }
    
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        vector<vector<int>> res;
        
        comS(candidates, target, vector<int>{}, res, 0);
        return res;
        
    }


};*/
class Solution {
public:
    void dfs(const vector<int> &num, vector<vector<int>> &ret, int target, vector<int> cur, size_t start) {
        if (target == 0) { ret.push_back(cur); return; }
        for (auto i = start; i < num.size(); ++i)
            if (i > start && num[i] == num[i-1]) continue;
            else if (num.at(i) <= target) {
                cur.push_back(num.at(i));
                dfs(num, ret, target - num.at(i), cur, i+1);
                cur.pop_back();
            } else break;
    }

    vector<vector<int> > combinationSum2(vector<int> &candidates, int target) {
        vector<vector<int>> ret;
        std::sort(candidates.begin(), candidates.end());
        dfs(candidates, ret, target, vector<int>{}, 0);
        return ret;
    }
};